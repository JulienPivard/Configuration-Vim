#! /bin/bash
# vim:foldmethod=marker:foldlevel=0
# Changer les droits avec chmod u+x fichier

# Dernière modification : Jeudi 21 novembre[11] 2019

###############################################################################
#                   ___                             __                        #
#                  /   |  _________ ___  ____  ____/ /__  ___                 #
#                 / /| | / ___/ __ `__ \/ __ \/ __  / _ \/ _ \                #
#                / ___ |(__  ) / / / / / /_/ / /_/ /  __/  __/                #
#               /_/  |_/____/_/ /_/ /_/\____/\__,_/\___/\___/                 #
#                                                                             #
###############################################################################

#(=^.^=)(=^.^=)(=^.^=)(=^.^=)(=^.^=)(=^.^=)(=^.^=)(=^.^=)(=^.^=)(=^.^=)(=^.^=)#
#                           configurationSourceVim                            #
#                          écrit par : PIVARD Julien                          #
#                       contact : pivardjulien@gmail.com                      #
#                                Novembre 2013                                #
#                               Licence : GPLv3                               #
#                                                                             #
#              Configuration et compilation des sources de vim.               #
#(=^.^=)(=^.^=)(=^.^=)(=^.^=)(=^.^=)(=^.^=)(=^.^=)(=^.^=)(=^.^=)(=^.^=)(=^.^=)#

# Options comportementales                      #{{{
# Arrête le script si une variable non initialisé est utilisée
set -u
# Équivalent à set -o errtrace pour s'assurer que les trap sont bien
# hérité dans les sous shell
set -E
# Permet de traiter les erreurs dans les pipeline avec la trap ERR
set -o pipefail
set -o posix
# Activation du mode verbose affiche la commande qui va être exécuté
#set -v
# Activation du mode xtrace affiche le résultat de chaque commande
#set -x
# Gestion des erreurs
trap 'ERREUR="${?}";
printf >&2 "\nErreur dans les définitions préliminaire ligne : ${LINENO}\n";
exit "${ERREUR}";' ERR

# On s'assure que l'UID existe bien
[[ -z "${UID}" ]] && UID="$(id -u)"

#}}}

####################################################
#{{{    Fonctions généralistes et configuration    #
####################################################

#{{{        Constante de sortie et d'erreur        #
####################################################

declare -ri EXIT_SUCCES=0

declare -ri E_ARG_AFF_ERR_M=80

declare -ri E_OPT_NON_TRAITEE=86


    #}}}

#{{{       Fonctions de gestions généraliste       #
####################################################

declare -i NB_COULEURS=0 NB_COLONNES=0 NB_LIGNES=0

# which_cmd                         {{{
function which_cmd ()
{
    which "${1}" 2>/dev/null || command -v "${1}" 2>/dev/null
}

        #}}}

# test_cmd_exist                    {{{
function test_cmd_exist ()
{
    which_cmd "${1}" >/dev/null 2>&1 && return 0 || return 1
}

        #}}}

    #}}}

#{{{            Définition des couleurs            #
####################################################

NEUTRE="" M_GRAS="" D_SOUL="" F_SOUL="" INVERS="" M__DIM=""

# Vérification de l'existence de la commande tput   {{{
if test_cmd_exist tput
then
    [[ `tput colors 2>/dev/null` -ge 8 ]] &&
        declare -ri NB_COULEURS=`tput colors` || declare -ri NB_COULEURS=0

    declare -r NEUTRE="`tput sgr 0`" M_GRAS="`tput bold`" D_SOUL="`tput smul`"
    declare -r F_SOUL="`tput rmul`"  INVERS="`tput rev`"  M__DIM="`tput dim`"
else
    declare -ri NB_COULEURS=0
fi

        #}}}

# Définition des couleurs                           {{{
if [[ "${NB_COULEURS}" -gt 0 ]]
then
    declare -r C___NOIR="`tput setaf 0`" C__ROUGE="`tput setaf 1`"
    declare -r C___VERT="`tput setaf 2`" C__JAUNE="`tput setaf 3`"
    declare -r C___BLEU="`tput setaf 4`" C_VIOLET="`tput setaf 5`"
    declare -r C___CYAN="`tput setaf 6`" C__BLANC="`tput setaf 7`"

    declare -r C___INOIR="`tput setaf 8`"  C__IROUGE="`tput setaf 9`"
    declare -r C___IVERT="`tput setaf 10`" C__IJAUNE="`tput setaf 11`"
    declare -r C___IBLEU="`tput setaf 12`" C_IVIOLET="`tput setaf 13`"
    declare -r C___ICYAN="`tput setaf 14`" C__IBLANC="`tput setaf 15`"

    declare -r C_SUR___NOIR="`tput setab 0`" C_SUR__ROUGE="`tput setab 1`"
    declare -r C_SUR___VERT="`tput setab 2`" C_SUR__JAUNE="`tput setab 3`"
    declare -r C_SUR___BLEU="`tput setab 4`" C_SUR_VIOLET="`tput setab 5`"
    declare -r C_SUR___CYAN="`tput setab 6`" C_SUR__BLANC="`tput setab 7`"

    declare -r C_SUR___INOIR="`tput setab 8`" C_SUR__IROUGE="`tput setab 9`"
    declare -r C_SUR___IVERT="`tput setab 10`" C_SUR__IJAUNE="`tput setab 11`"
    declare -r C_SUR___IBLEU="`tput setab 12`" C_SUR_IVIOLET="`tput setab 13`"
    declare -r C_SUR___ICYAN="`tput setab 14`" C_SUR__IBLANC="`tput setab 15`"
else
    # Les couleurs sont mises à vide si tput n'est pas installé
    declare -r C___NOIR="" C__ROUGE="" C___VERT="" C__JAUNE=""
    declare -r C___BLEU="" C_VIOLET="" C___CYAN="" C__BLANC=""

    declare -r C___INOIR="" C__IROUGE="" C___IVERT="" C__IJAUNE=""
    declare -r C___IBLEU="" C_IVIOLET="" C___ICYAN="" C__IBLANC=""

    declare -r C_SUR___NOIR="" C_SUR__ROUGE="" C_SUR___VERT="" C_SUR__JAUNE=""
    declare -r C_SUR___BLEU="" C_SUR_VIOLET="" C_SUR___CYAN="" C_SUR__BLANC=""

    declare -r C_SUR___INOIR="" C_SUR__IROUGE="" C_SUR___IVERT="" C_SUR__IJAUNE=""
    declare -r C_SUR___IBLEU="" C_SUR_IVIOLET="" C_SUR___ICYAN="" C_SUR__IBLANC=""
fi

        #}}}

    #}}}

#{{{ Fonctions généralistes utilisant des couleurs #
####################################################

# ligne_vide                        {{{
function ligne_vide ()
{
    printf >&2 '\n'
}

        #}}}

# separateur_section                {{{
function separateur_section ()
{
    printf >&2 '%s\n' " --- ${NEUTRE}${M__DIM}${M_GRAS}${*}${NEUTRE} --- "
}

        #}}}

# message_ok                        {{{
function message_ok ()
{
    printf >&2 "${NEUTRE}${C_SUR___VERT}${C__BLANC}${M_GRAS} OK ${NEUTRE} "
    [[ "${#}" -gt 0 ]] && echo >&2 "${*}" || ligne_vide
    ligne_vide
}

        #}}}

# message_erreur                    {{{
function message_erreur ()
{
    printf >&2 "${NEUTRE}${C_SUR__ROUGE}${C__BLANC}${M_GRAS} ERREUR ${NEUTRE} "
    [[ "${#}" -gt 0 ]] && echo >&2 "${*}" || ligne_vide
    ligne_vide
}

        #}}}

# message_attention                 {{{
function message_attention ()
{
    printf >&2 "${NEUTRE}${C_SUR__JAUNE}${C__BLANC}${M_GRAS} ATTENTION ! ${NEUTRE} "
    [[ "${#}" -gt 0 ]] && echo >&2 "${*}" || ligne_vide
    ligne_vide
}

        #}}}

# message_avertissement             {{{
function message_avertissement ()
{
    printf >&2 "${NEUTRE}${C_SUR___CYAN}${C__BLANC}${M_GRAS} AVERTISSEMENT ! ${NEUTRE} "
    [[ "${#}" -gt 0 ]] && echo >&2 "${*}" || ligne_vide
    ligne_vide
}

        #}}}

# demander_utilisateur              {{{
function demander_utilisateur ()
{
    printf >&2 '%s\n%s' "${*}" '(o/n) : '
    printf >>"${FICHIER_LOG_EXECUTION}" '%s\n%s' "${*}" '(o/n) : '
    while IFS= read -r -n 1 -s reponse
    do
        [[ "${reponse}" = [OoYyNn] ]] && printf >&2 '%s\n' "${reponse}"
        [[ "${reponse}" = [OoYyNn] ]] && printf >>"${FICHIER_LOG_EXECUTION}" '%s\n' "${reponse}"
        [[ "${reponse}" = [OoYy] ]] && return 0
        [[ "${reponse}" = [Nn] ]] && return 1
    done
}

        #}}}

# affichage_echappee                {{{
printf '%q ' test >/dev/null 2>&1 && AFFICHAGE_ECHAPPE='printfq' || AFFICHAGE_ECHAPPE=''
declare -r AFFICHAGE_ECHAPPE
function affichage_echappee ()
{
    if [[ "${AFFICHAGE_ECHAPPE}" == 'printfq' ]]
    then
        printf '%q ' "${@}"
    else
        printf '%s' "${*}"
    fi
    return 0
}

        #}}}

# executer_commande                 {{{
function executer_commande ()
{
    local -r user="${USER--}" dir="${PWD}"
    local info info_console

    if [[ "${UID}" -eq 0 ]]
    then
        info="[root ${dir}]# "
        info_console="[${M__DIM}${dir}${NEUTRE}]# "
    else
        info="[${user} ${dir}]$ "
        info_console="[${M__DIM}${dir}${NEUTRE}]$ "
    fi

    # Consigne l'exécution de la commande dans les logs.
    printf >>"${FICHIER_LOG_EXECUTION}" "${info}"
    affichage_echappee >>"${FICHIER_LOG_EXECUTION}" "${@}"
    printf >>"${FICHIER_LOG_EXECUTION}" " ... "

    # Affiche l'exécution de la commande sur la sortie d'erreur standard.
    printf >&2 "${info_console}${M_GRAS}${C__JAUNE}"
    affichage_echappee >&2 "${@}"
    printf >&2 "${NEUTRE}\n"

    # Exécute la commande
    "${@}" && local -r Code_Erreur=0 || local -r Code_Erreur="${?}"

    if [[ "${Code_Erreur}" -ne 0 ]]
    then
        message_erreur
        printf >>"${FICHIER_LOG_EXECUTION}" "Erreur avec le code : ${Code_Erreur}\n"
    else
        message_ok
        printf >>"${FICHIER_LOG_EXECUTION}" "OK\n"
    fi

    return "${Code_Erreur}"
}

        #}}}

# Affichage simplifié des erreurs   {{{
# Affichage : Affiche en couleur rouge arg1; en violet gras [arg2];
# arg3 en rouge...
function afficher_erreur ()
{
    [[ -n "${1}" ]] || exit "${E_ARG_AFF_ERR_M}";
    local AFFICHAGE="${1}" LOG="${1}"
    if [[ "${#}" -ge 2 ]]
    then
        AFFICHAGE="${AFFICHAGE} [ ${C_VIOLET}${M_GRAS}"
        AFFICHAGE="${AFFICHAGE}${2}"
        AFFICHAGE="${AFFICHAGE}${NEUTRE}${C__ROUGE} ] "
        LOG="${LOG} [ ${2} ] "
    fi
    [[ "${#}" -ge 3 ]] && AFFICHAGE="${AFFICHAGE}${3}" LOG="${LOG}${3}"
    if [[ "${#}" -ge 4 ]]
    then
        AFFICHAGE="${AFFICHAGE} [ ${C_VIOLET}${M_GRAS}"
        AFFICHAGE="${AFFICHAGE}${4}"
        AFFICHAGE="${AFFICHAGE}${NEUTRE}${C__ROUGE} ] "
        LOG="${LOG} [ ${4} ] "
    fi
    [[ "${#}" -ge 5 ]] && AFFICHAGE="${AFFICHAGE}${5}"
    [[ "${#}" -ge 5 ]] && LOG="${LOG}${5}"
    printf >>"${FICHIER_LOG_EXECUTION}" '%s\n' "${LOG}"
    printf >&2 '%s\n' "${NEUTRE}${C__ROUGE}${AFFICHAGE}${NEUTRE}"
}

        #}}}

    #}}}

#{{{            Informations système               #
####################################################
# Vérifie si le script à été lancé avec bash
[[ -z "${BASH_VERSION}" ]] && BASH_MAJOR_VERSION='0' || BASH_MAJOR_VERSION="${BASH_VERSINFO[0]}"
declare -r BASH_MAJOR_VERSION

declare -r SYSTEM="$(uname -s)"
[[ "${SYSTEM}" = 'Darwin' ]] && OS='MacOS' || OS="$(uname -o)"
declare -r OS
declare -r MACHINE="$(uname -m)"

    #}}}

#}}}

# Retirer l'extension %.* un % par extension à retirer.
# Ne garder que l'extension avec #*. Voila.
####################################################
#{{{                    Code                       #
####################################################

# fonctions de l'application elle même      {{{

# Fonction affiche_section       #{{{
affiche_section()
{
    declare -r COUL="${1}"
    declare -r t="${2}"
    declare -i largeur=80
    declare -i taille_txt="${#t}"
    largeur=$(( ( largeur - taille_txt ) / 2 ))
    printf >&2 "${COUL}"
    eval "printf >&2 '%.s ' {1..$largeur}"
    printf >&2 "${t}"
    eval "printf >&2 '%.s ' {1..$largeur}"
    printf >&2 "${NEUTRE}\n"
}

        #}}}

    #}}}

# fonctions des options                     {{{

# afficher_aide                     {{{
declare -r NOM_SCRIPT=`basename "${0}"`
declare -r USAGE="\
 Usage : ${NOM_SCRIPT}
    ou : ${NOM_SCRIPT} [-h]

Petite explication du rôle du script

Options :
    -h --help
        Affiche l'aide et quitte.
"

function afficher_aide ()
{
    printf >&2 '%s' "${USAGE}"
}

        #}}}

    #}}}

#}}}

declare -r FICHIER_LOG_EXECUTION="./.log_${NOM_SCRIPT%.*}.log"
cat <<EOF >>"${FICHIER_LOG_EXECUTION}"
---------------------------------- : `date '+%F %T'`
--  System             : ${SYSTEM}
--  Operating System   : ${OS}
--  Machine            : ${MACHINE}
--  BASH major version : ${BASH_MAJOR_VERSION}
----------------------------------
EOF

####################################################
#{{{             Gestion des options               #
####################################################

# Si on a des arguments
if [[ "${#}" -gt 0 ]]
then
    printf >>"${FICHIER_LOG_EXECUTION}" '%s\n' 'Script appelé avec les options : '
    affichage_echappee >>"${FICHIER_LOG_EXECUTION}" "${@}"
    printf >>"${FICHIER_LOG_EXECUTION}" '\n'
else
    printf >>"${FICHIER_LOG_EXECUTION}" '%s\n' 'Script appelé sans options'
fi
printf >>"${FICHIER_LOG_EXECUTION}" '\n'

# Vérifie que toutes les options ont été traitées
# OPTIND indique la position de l'argument suivant à traiter par getopt
shift $((OPTIND-1))
# Si toutes les options n'ont pas été traitée on affiche une erreur
if [[ "${#}" -ne 0 ]]
then
    afficher_erreur "Le ou Les arguments suivant ne sont pas valide :" "${*}"
    afficher_aide
    exit "${E_OPT_NON_TRAITEE}";
fi

#}}}

####################################################
#{{{                 Exécution                     #
####################################################

# Si le PATH ne s'initialise pas correctement :
#export PATH='/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin'

ligne_vide

#echo "Pour installer avec le support de clipboard installer xorg-dev"

if [[ -e "./src/vim" ]]
then
    affiche_section "${C_SUR__JAUNE}${C___NOIR}" 'Nettoyage de la compilation précédente'
    executer_commande make distclean
fi

affiche_section "${C_SUR___VERT}${C___NOIR}" 'Configuration de vim'

executer_commande ./configure --with-features=huge \
            --with-compiledby=Asmodee \
            --enable-multibyte \
            --enable-rubyinterp \
            --enable-perlinterp \
            --enable-pythoninterp=yes \
            --enable-cscope --disable-netbeans \
            --enable-gui=auto --with-x --prefix=/usr \
            --enable-fail-if-missing
erreur=$?

if [[ "${erreur}" -eq 0 ]]
then
    affiche_section "${C_SUR___VERT}${C___NOIR}" 'Compilation de vim'
    executer_commande make

    erreur=$?
    if [[ "${erreur}" -eq 0 ]]
    then
        affiche_section "${C_SUR___VERT}${C___NOIR}" 'Installation de vim'
        executer_commande sudo make install
    fi

else

    affiche_section "${C_SUR__JAUNE}${C___NOIR}" 'Erreur pendant la configuration'

    message_avertissement 'Certaines librairie pourraient ne pas être installée :'
    printf >&2 'sudo apt-get install libperl-dev python-dev ruby-dev libncurses5-dev'
    ligne_vide

fi

#}}}

exit "${EXIT_SUCCES}";
