" vim:filetype=vim
" Dans le fichier [autoload/gnat.vim] ligne 122 remplacer par :
			   \ '%f:%l:%c: (%ttyle) %m'   .
			   \ '%f:%l:%c: %m' }



" Dans le fichier [autoload/ada.vim] ligne 120 ajouter Scalar_Storage_Order
" au dictionnaire.
'''Safe_Small', '''Scalar_Storage_Order', '''Scale'



" Dans le fichier [compiler/gnat.vim] ligne 33 remplacer F7 par une autre commande



" Dans le fichier [syntax/ada.vim] ligne 60 ajouter \> en fin de ligne :
      execute 'syntax match adaAttribute "\V' . b:Item['word'] . '\>"'

" Dans le meme fichier ligne 240 remplacer :
   syntax match adaBeginWith	"^\s*\zs\(\(with\(\s\+type\)\=\)\|\(use\)\)\>" contains=adaInc
" par :
   syntax match adaBeginWith        "^\zs\(\(with\)\|\(use\)\)\>" contains=adaInc nextgroup=adaSemiWith
   syntax match adaSemiWith "\(;\s*\)\@<=\(\(with\)\|\(use\)\)\>" contains=adaInc nextgroup=adaSemiWith



" Dans le fichier [indent/ada.vim] ligne 46 remplacer par :
   let s:AdaBlockStart = '^\s*\(if\>\|while\>\|else\>\|elsif\>\|loop\>\|for\>.*\<\(loop\|use\)\>\|declare\>\|begin\>\|type\>.*\<is\>[^;]*$\|\(type\>.*\)\=\<record\>\|procedure\>\|function\>\|entry\>\|accept\>\|do\>\|task\>\|package\>\|protected\>\|project\>\|then\>\|when\>\|is\>\|select\>\|or\>\)'
" et ligne 48
   let s:AdaBlockStart = '^\s*\(if\>\|while\>\|else\>\|elsif\>\|loop\>\|for\>.*\<\(loop\|use\)\>\|declare\>\|begin\>\|type\>.*\<is\>[^;]*$\|\(type\>.*\)\=\<record\>\|procedure\>\|function\>\|entry\>\|accept\>\|do\>\|task\>\|package\>\|protected\>\|then\>\|when\>\|is\>\|select\>\|or\>\)'
"Ligne 36
setlocal indentkeys+=0=~then,0=~end,0=~elsif,0=~else,0=~when,0=~exception
setlocal indentkeys+=0=~begin,0=~is,0=~record,0=~do,0(,0),0=~or
"Ligne 183
   let line = substitute (getline (v:lnum), g:ada#Comment, '', '')
   if line =~ '^\s*)'
      " On se place au début de ligne qui viens d'être écrite.
      call cursor (v:lnum, 1)
      " On cherche la position de la parenthèse qui viens d'être écrite.
      call searchpos (')', 'cW')
      let pos_par_ouvrante = searchpair ('(', '', ')', 'bW', '')
      return indent (pos_par_ouvrante)
   endif
" Ligne 273
      let ind = s:MainBlockIndent( ind, lnum, '\(procedure\|function\|declare\|package\|task\|protected\|entry\)\>', 'begin\>' )
"Ligne 274
   elseif line =~ '^\s*do\>'
      let ind = s:MainBlockIndent( ind, lnum, 'accept\>', '' )
   elseif line =~ '^\s*or\>'
      let ind = s:MainBlockIndent( ind, lnum, 'select\>', '\<if\>' )
" Ligne 284
   elseif line =~ '^\s*when\>'
      " Align 'when' one /in/ from matching block start
      let ind = s:MainBlockIndent( ind, lnum, '\(case\|exception\|select\|or\)\>', '' ) + shiftwidth()
" Ligne 287
      let ind = s:MainBlockIndent( ind, lnum, '\(if\|while\|for\|loop\|accept\|begin\|record\|case\|exception\|protected\>\|task\>\|package\)\>', '' )
