priority -45

snippet ent "entry ... when"
entry $1 ($2) when $3 is
begin
	$0
end $1;
endsnippet

snippet acc "accept"
accept $1 ($2) do
	$0
end $1;
endsnippet

snippet prot "protected type"
protected type $1 ($2) is
	$0
end $1;
endsnippet

snippet decn "declare named block"
$1 :
declare
	$2
begin
	$0
end $1;
endsnippet

snippet nwh "named while"
$1 :
while $2 loop
	$0
end loop $1;
endsnippet

snippet nfor "named for"
$1 :
for ${2:I} in $3 loop
	$0
end loop $1;
endsnippet

snippet nfore "named for each"
$1 :
for $2 of $3 loop
	$0
end loop $1;
endsnippet

snippet proc "procedure"
---------------------------------------------------------------------------
procedure $1 ($2) is
	$3
begin
	$0
end $1;
endsnippet

snippet fun "function"
---------------------------------------------------------------------------
function $1 ($2) return $3 is
	$4
begin
	$0
end $1;
endsnippet

snippet nlo "named loop"
$1 :
loop
	$0
end loop $1;
endsnippet

snippet put "Ada.Text_IO.Put"
Ada.Text_IO.Put ($1);$0
endsnippet

snippet putl "Ada.Text_IO.Put_Line"
Ada.Text_IO.Put_Line ($1);$0
endsnippet

snippet wwput "Ada.Wide_Wide_Text_IO.Put"
Ada.Wide_Wide_Text_IO.Put ($1);$0
endsnippet

snippet wwputl "Ada.Wide_Wide_Text_IO.Put_Line"
Ada.Wide_Wide_Text_IO.Put_Line ($1);$0
endsnippet

snippet get "Ada.Text_IO.Get"
Ada.Text_IO.Get ($1);$0
endsnippet

snippet getl "Ada.Text_IO.Get_Line"
Ada.Text_IO.Get_Line ($1);$0
endsnippet

snippet newline "Ada.Text_IO.New_Line"
Ada.Text_IO.New_Line (${1:1});$0
endsnippet

# vim:ft=snippets:
